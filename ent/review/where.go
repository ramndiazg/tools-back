// Code generated by ent, DO NOT EDIT.

package review

import (
	"time"
	"tools-back/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldID, id))
}

// UserUUID applies equality check predicate on the "user_uuid" field. It's identical to UserUUIDEQ.
func UserUUID(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldUserUUID, v))
}

// ToolUUID applies equality check predicate on the "tool_uuid" field. It's identical to ToolUUIDEQ.
func ToolUUID(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldToolUUID, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldRating, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldComment, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldCreatedAt, v))
}

// UserUUIDEQ applies the EQ predicate on the "user_uuid" field.
func UserUUIDEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldUserUUID, v))
}

// UserUUIDNEQ applies the NEQ predicate on the "user_uuid" field.
func UserUUIDNEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldUserUUID, v))
}

// UserUUIDIn applies the In predicate on the "user_uuid" field.
func UserUUIDIn(vs ...uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldUserUUID, vs...))
}

// UserUUIDNotIn applies the NotIn predicate on the "user_uuid" field.
func UserUUIDNotIn(vs ...uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldUserUUID, vs...))
}

// UserUUIDGT applies the GT predicate on the "user_uuid" field.
func UserUUIDGT(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldUserUUID, v))
}

// UserUUIDGTE applies the GTE predicate on the "user_uuid" field.
func UserUUIDGTE(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldUserUUID, v))
}

// UserUUIDLT applies the LT predicate on the "user_uuid" field.
func UserUUIDLT(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldUserUUID, v))
}

// UserUUIDLTE applies the LTE predicate on the "user_uuid" field.
func UserUUIDLTE(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldUserUUID, v))
}

// ToolUUIDEQ applies the EQ predicate on the "tool_uuid" field.
func ToolUUIDEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldToolUUID, v))
}

// ToolUUIDNEQ applies the NEQ predicate on the "tool_uuid" field.
func ToolUUIDNEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldToolUUID, v))
}

// ToolUUIDIn applies the In predicate on the "tool_uuid" field.
func ToolUUIDIn(vs ...uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldToolUUID, vs...))
}

// ToolUUIDNotIn applies the NotIn predicate on the "tool_uuid" field.
func ToolUUIDNotIn(vs ...uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldToolUUID, vs...))
}

// ToolUUIDGT applies the GT predicate on the "tool_uuid" field.
func ToolUUIDGT(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldToolUUID, v))
}

// ToolUUIDGTE applies the GTE predicate on the "tool_uuid" field.
func ToolUUIDGTE(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldToolUUID, v))
}

// ToolUUIDLT applies the LT predicate on the "tool_uuid" field.
func ToolUUIDLT(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldToolUUID, v))
}

// ToolUUIDLTE applies the LTE predicate on the "tool_uuid" field.
func ToolUUIDLTE(v uuid.UUID) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldToolUUID, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v int) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v int) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v int) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v int) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldRating, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Review {
	return predicate.Review(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Review {
	return predicate.Review(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Review {
	return predicate.Review(sql.FieldContainsFold(FieldComment, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Review) predicate.Review {
	return predicate.Review(sql.NotPredicates(p))
}
